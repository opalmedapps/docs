' SPDX-FileCopyrightText: Copyright (C) 2024 Opal Health Informatics Group at the Research Institute of the McGill University Health Centre <john.kildea@mcgill.ca>
'
' SPDX-License-Identifier: CC-BY-SA-4.0

@startuml Opal PIE Deployment
!include <C4/C4_Deployment>

title Deployment diagram for the Opal PIE with a separate database server

AddElementTag("init", $bgColor="#c0c0c0", $legendText="init (used at deploy or upgrade time)")
AddRelTag("init", $textColor="#c0c0c0", $lineColor="#c0c0c0")

Deployment_Node(hospital, "Hospital", "Hospital Network") {
    Deployment_Node(browser, "Browser", "Firefox, Chrome, or Edge", "Clinical staff use a browser to access the web applications") {

    }

    Deployment_Node(opal, "Opal PIE", "Hospital data centre") {
        Deployment_Node(apps, "Application Server", "CentOS Stream9 or Ubuntu LTS") {
            Deployment_Node(apps_runtime, "Container Runtime", "Docker Engine") {
                Container(traefik, "Reverse Proxy", "traefik", "Takes care of TLS termination and path rewrites\nRedirects all HTTP requests to HTTPS")
                Container(admin, "Opal Admin", "", "Web application exposing APIs and providing new OpalAdmin interface")
                Container(admin_legacy, "Opal Admin Legacy", "Apache, PHP", "Web application for clinicians and staff to set up and manage data")
                Container(listener, "Listener", "Node.js", "Handles requests from the user applications to access patient data")
                ' Container(orms, "ORMS", "Apache, PHP", "Opal Room Management Software that provides the virtual waiting room and live clinician dashboard")
                Container(redis, "redis", "", "Caches patients being processed to avoid sending push notifications when batch processing lab results")
                Container(db_management, "db-management", "", "Database migrations\nRun at initialization or upgrade time to migrate DBs", $tags="init")
                Container(ofelia, "ofelia", "", "Sidecar to run tasks periodically on containers")
            }
        }
        Deployment_Node(dbs, "Application Server", "CentOS Stream9 or Ubuntu LTS") {
            Deployment_Node(db, "MariaDB", "MariaDB") {
                ContainerDb(legacy_dbs, "Legacy Databases", "RDS", "DBs for legacy components\n(OpalDB, QuestionnaireDB)")
                ContainerDb(admin_db, "Backend Database", "RDS", "DB for admin")

            }
        }

        Container_Ext(integration_engine, "Integration Engine", "", "Interfaces with source systems\nExposes API endpoints")
    }
}

Deployment_Node(firebase, "Firebase") {
    Container_Ext(rtd_opal, "Realtime Database", "us-central1", "Temporarily stores requests and responses from the user applications") {

    }

'    Container_Ext(rtd_orms, "Realtime Database", "us-central1", "Temporarily stores shortened patient names to call patients via TV screens in the waiting rooms") {
'
'    }
}

Rel(browser, traefik, "Makes request\nvia browser", "HTTP/HTTPS")
Rel(traefik, admin, "Sends requests to / to")
Rel(traefik, admin_legacy, "Sends requests to /opalAdmin to")
' Rel(traefik, orms, "Sends requests to /orms to")

Rel(integration_engine, traefik, "Makes API calls to", "HTTPS")
'Rel(integration_engine, admin_legacy, "Makes API calls to", "HTTPS")
'Rel(integration_engine, orms, "Makes API calls to", "HTTPS")

Rel(admin, integration_engine, "Makes API calls to", "HTTPS")
Rel(listener, integration_engine, "Makes API calls to", "HTTPS")
Rel(admin_legacy, integration_engine, "Makes API calls to", "HTTPS")
'Rel(orms, integration_engine, "Makes API calls to", "HTTPS")

Rel(admin_legacy, redis, "Makes calls to")
' Rel(orms, memcached, "Makes calls to")

Rel(admin, admin_db, "Reads from and writes to", "TLS")
Rel(admin, legacy_dbs, "Reads from and writes to", "TLS")
Rel(admin_legacy, legacy_dbs, "Reads from and writes to", "TLS")
Rel(listener, legacy_dbs, "Reads from and writes to", "TLS")
' Rel(orms, legacy_dbs, "Reads from and writes to", "")
Rel(db_management, legacy_dbs, "Reads from and writes to", "TLS", $tags="init")

Rel(listener, rtd_opal, "Connects to, reads from, and writes to")
' Rel(orms, rtd_orms, "Connects to, reads from, and writes to")

Lay_Left(admin_legacy, admin)
Lay_Up(redis, db)

' LAYOUT_WITH_LEGEND()
SHOW_LEGEND()

footer Relationships between components on the same host are left out for brevity (except those making use of third-party components).\n\ndrawn with PlantUML version %version() and C4-PlantUML version C4Version()

@enduml
